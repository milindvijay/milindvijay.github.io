dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
warnings()
head(affyData)
dbDisconnect(hg19)
hg19 <- dbConnect(MySQL(),user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query)
dim(affyMisSmall)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
creaed = h5createGroup("example.h5", "foo")
creaed = h5createGroup("example.h5", "baa")
creaed = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1,2.0,by0.1),dim=C(5,2,2))
B = array(seq(0.1,2.0,by=0.1),dim=C(5,2,2))
B
A
B=array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
attr(B,"Scale") <- "liter"
h5write(B, "example.h5", "foo/fooba/B")
h5ls("example.h5")
h5write(B, "example.h5", "foo/fooboo/B")
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df <- data.frame(1L:5L, seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"),stringAsFactors = FALSE)
h5write(df,"example.h5", "df")
h5ls("example.h5")
readA <- h5Read("example.h5", "foo/A")
library(rhdf5)
created = h5createFile("example.h5")
created
creaed = h5createGroup("example.h5", "foo")
creaed = h5createGroup("example.h5", "baa")
creaed = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B=array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
attr(B,"Scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df <- data.frame(1L:5L, seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"),stringAsFactors = FALSE)
h5write(df,"example.h5", "df")
h5ls("example.h5")
readA <- h5Read("example.h5", "foo/A")
readB <- h5Read("example.h5", "foobaa/B")
readA <- h5read("example.h5", "foo/A")
readB <- h5read("example.h5", "foobaa/B")
readdf <- h5read("example.h5", "df")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
creaed = h5createGroup("example.h5", "foo")
creaed = h5createGroup("example.h5", "baa")
creaed = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B=array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
attr(B,"Scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df <- data.frame(1L:5L, seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"),stringAsFactors = FALSE)
h5write(df,"example.h5", "df")
h5ls("example.h5")
readA <- h5read("example.h5", "foo/A")
readB <- h5read("example.h5", "foobaa/B")
h5close()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
h5close()
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode <- readLines(con)
close(con)
htmlCode
# Parse web data with XML
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(//td[@id='col-citedby']",xmlValue)
xpathSApply("//td[@id='col-citedby']",xmlValue)
library(httr)
html2 <- GET(url)
content2 <- content(html2,as="text")
parsedHtml <- htmlParse(content2, asText=TRUE)
xpathSApply(parcedHtml, "//title", xmlValue)
parsedHtml <- htmlParse(content2, asText=TRUE)
html2
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parcedHtml, "//title", xmlValue)
library(httr)
url <- "http://www.google.com"
html2 <- GET(url)
content2 <- content(html2,as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parcedHtml, "//title", xmlValue)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, "gdpdata.csv")
download.file(fileUrl3, "edudata.csv")
gdpdata <- read.csv("gdpdata.csv")
edudata <- read.csv("edudata.csv")
mergedData <- merge(gdpdata,edudata,by.x="X",by.y="CountryCode")
shortList <- grep("Fiscal year end: June", shortList$Special.Notes)
head(shortList)
head(mergedData)
shortList <- grep("Fiscal year end: June", mergedData$Special.Notes)
length(shortList)
library(quantmod)
install.packages(quantmod)
install.packages("quantmod")
library("quantmod")
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes, 15)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
SampleTimes.Sub <- grepl('2012-*',sampleTimes)
2012Data <- subset(sampleTimes, sampleTimes.Sub)
Data2012 <- subset(sampleTimes, sampleTimes.Sub)
install.packages("quantmod")
install.packages("quantmod")
library("quantmod")
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
SampleTimes.Sub <- grepl('2012-*',sampleTimes)
Data2012 <- subset(sampleTimes, sampleTimes.Sub)
Data2012 <- subset(sampleTimes, SampleTimes.Sub)
day <- format(Data2012, '%A')
table(day)
table(Data2012)
table(SampleTimes.Sub)
library("datasets")
data("cars")
with(cars, plot(speed, dist))
library("lattice")
state <- data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
library("ggplot2")
data(msg)
data("msg")
data("mpg")
qplot(displ, hwy, data = mpg)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
colors()
library(crayon)
cat(blue("Hello", "world!\n"))
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and wind in NY City")
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NY City"))
with(subset(airquality, month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue", pch = 2))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue", pch = 3))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue", pch = 4))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue", pch = 104))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue", pch = 1004))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue", pch = 234))
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NY City", type = "n"))
with(subset(airquality, Month == 5), Points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month == 5), Points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NY City", pch = 20))
model = lm(Ozone ~ Wind, airquality)
abline(model, lwd=2)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NY City", pch = 20))
model = lm(Ozone ~ Wind, airquality)
abline(model, lwd=2)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in NY City", outer = TRUE)
})
model = lm(Ozone ~ Wind, airquality)
abline(model, lwd=2)
x <- rnorm(100)
hist(x)
par(mfrow = c(1, 1))
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x, y)
example("points")
x <- rnorm(100)
y <- rnorm(100)
title("Scatterplot")
text(-2, -2, "Label")
example("points")
x <- rnorm(100)
y <- rnorm(100)
plot(x, y)
title("Scatterplot")
text(-2, -2, "Label")
legend("topleft", legend = "Data", pch=19)
fit <- lm(y~x)
abline(fit)
abline(fit, lwd=3)
abline(fit, lwd=3, col="blue")
?Devices
library(datasets)
pdf(file="myplot.pdf")
with(faithful,plot(eruptions, waiting))
title(main="Old Faithful Geyser Data")
dev.off()
dev.cur() #shows currently open graphic devices
with(faithful,plot(eruptions, waiting))
title(main="Old Faithful Geyser Data")
dev.copy(png, file="geyserplot.png")
dev.off()
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1))
# Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) # First call the default panel function for xyplot
panel.abline(h = median(y), lty = 2) # Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) # First call the default panel function for xyplot
panel.lmline(x, y, col = 2) # Add a simple linear regression line
})
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = 'blue', pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
z <- qnorm(1 - alpha)
mua = 32
mu0 = 30
n = 16
sigma = 4
z <- qnorm(1 - alpha)
pnormn(mu0 + z * sigma / sqrt(n), mean = mua, sd = sigma / sqrt(n), lower.tail = FALSE)
z <- qnorm(1 - alpha)
x <- 1:4
p <0 x/sum(x)
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
targetDBP <- 70
μ <- 80
σ <- 10
percentage <- round(pnorm(targetDBP, mean = μ, sd = σ) * 100)
percentage
quantile <- 0.95
μ <- 1100
σ <- 75
volume <- round(qnorm(quantile, mean = μ, sd = σ))
volume
quantile <- 0.95
μ <- 1100
σ <- 75
n <- 100
SE <- σ/sqrt(n)
round(qnorm(quantile, mean = μ, sd = SE))
p <- 0.5
n <- 5
quantile <- 3 # 4 or 5 out of 5, with lower
probPercentage1 <- round(pbinom(quantile, size=n, prob=p, lower.tail = FALSE) * 100)
probPercentage1
μ <- 15
σ <- 10
n <- 100
SE <- σ/sqrt(n)
left <- 14
right <- 16
percentageLeft <- pnorm(left, mean = μ, sd = SE) * 100
percentageRight <- pnorm(right, mean = μ, sd = SE) * 100
probPercentage <- round(percentageRight - percentageLeft)
probPercentage
quantile <- 0.5
μ <- 0.5
σ <- 1/12
n <- 1000
SE <- σ/sqrt(n)
qnorm(quantile, mean = μ, sd = SE)
t <- 3
λ <- 5
quantile <- 10
probability <- round(ppois(quantile, lambda = t * λ), digits=2)
probability
λ <- 5
t <- 3
y <- 5
quantile <- 10
probability <- round(ppois(quantile, lambda = t * y), digits=2)
probability
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
examinations
test <- t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
pval <- test$p.value
round(pval,3)
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
round(test$p.value,2)
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
# calculate pooled standard deviation
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(n=n, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
round(pow, 2)
i
i
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- 0.9 #power
n <- power.t.test(power=pow, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$n
ceiling(n/10)*10
install.packages("MiKTeX")
install.packages("ggplot")
library(ggplot2)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)/sum(x^2)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
beta1<-cor(y,x)*sd(y)/sd(x)
coef(lm(mtcars$mpg~mtcars$wt))
sd(x)/sd(y)=0.5
sd(x)/sd(y)=0.5
cor(y,x)=0.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
miu <- mean(x)
S<-sd(x)
(8.58 - miu)/S
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(x) - beta1*mean(x)
coef(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
beta1<- cor(y,x) * sd(y)/sd(x)
y1<-cor(x,y) * sd(x)/sd(y)
beta1/y1 = (sd(y)^2) / (sd(x)^2) = var(y) / var(x)
install.packages("UsingR")
install.packages("UsingR")
library(UsingR)
data(galton)
library(reshape)
install.packages("reshape")
library(reshape)
long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth = 1)
g <- g + facet_grid(. ~ variable)
g
library(manipulate)
install.packages("manipulate")
library(manipulate)
fit <- lm(y ~ x)
coefTable <- coef(summary(fit))
(pval <- coefTable[2, 4])
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
coefTable <- coef(summary(fit))
(pval <- coefTable[2, 4])
summary(fit)$sigma
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
yhat <- fit_car$coef[1] + fit_car$coef[2] * 3
yhat + c(-1, 1) * qt(.975, df = fit_car$df) * summary(fit_car)$sigma * sqrt(1 + (1/length(y)) + ((3 - mean(x)) ^ 2 / sum((x - mean(x)) ^ 2)))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
lm.influence(fit)$hat
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit6 <- lm(y ~ x)
dfbetas(fit6)[, 2]
Library(MASS)
install.packages("MASS")
library(MASS)
summary(shuttle)
install.packages(MikTex)
install.packages("MikTex")
install.packages("MiKTex")
install.packages("MiKTeX")
install.packages("pairsD3")
install.packages("pairsD3")
require("pairsD3")
shinypairs(mpg ~ ., data = mtcars)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
load(ggplot2)
load(ggplot)
load("ggplot2")
install.packages('devtools')
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
install.packages("stringi",type="win.binary")
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
getwd()
setwd("~/Milind/R/Coursera/Slidify")
author("first_deck")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
install.packages("car")
text=list(c("4 Cylinder","6 Cylinder","8 Cylinder"))))
library(lattice)
splom(mtcars[c(1,3,5,6)], groups=cyl, data=mtcars,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=3,
points=list(pch=super.sym$pch[1:3],
col=super.sym$col[1:3]),
text=list(c("4 Cylinder","6 Cylinder","8 Cylinder"))))
pairs(~mpg+disp+drat+wt,data=mtcars,
main="Simple Scatterplot Matrix")
knit        : slidify::knit2slides
setwd("~/Milind/R/Coursera/Slidify/first_deck")
publish(title = 'Developing Data Product', 'index.html', host = 'rpubs')
knit        : slidify::knit2slides
publish(title = 'Developing Data Product', 'index.html', host = 'rpubs')
publish(title = 'Developing Data Product', 'index.html', host = 'rpubs')
